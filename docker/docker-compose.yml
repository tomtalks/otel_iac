services:
# ######################################################################
# OpenTelemetry part
# ######################################################################
  otel-collector:
    image: ${DOCKER_REGISTRY}${IMG_OTEL}
    container_name: otel-collector
    command:
      - "--config=/etc/otel-conf.yml"
      - "${OTELCOL_ARGS}"
    volumes:
      - ./config/otel-conf.yml:/etc/otel-conf.yml
    ports:
      - "10002:10002"   # Prometheus metrics exposed by the collector
      - "10003:10003"   # Prometheus exporter metrics
      - "10001:10001"        # OTLP gRPC receiver
    depends_on:
      - prometheus
      - loki
      - tempo

# ######################################################################
# Observability part
# ######################################################################
  loki:
    container_name: loki
    image: ${DOCKER_REGISTRY}${IMG_LOKI}
    volumes:
      - ./config/loki-config.yml:/etc/config/loki.yaml
    entrypoint:
      - /usr/bin/loki
      - -config.file=/etc/config/loki.yaml
    ports:
      - "3100:3100"

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: ${DOCKER_REGISTRY}${IMG_TEMPO}
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/tmp/tempo"
    volumes:
      - tempo_data:/tmp/tempo

  tempo:
    container_name: tempo
    image: ${DOCKER_REGISTRY}${IMG_TEMPO}
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo.yml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    depends_on:
      - init

  prometheus:
    container_name: prometheus
    image: ${DOCKER_REGISTRY}${IMG_PROMETHEUS}
    command:
      - "--enable-feature=remote-write-receiver"
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: ${DOCKER_REGISTRY}${IMG_GRAFANA}
    container_name: grafana
    ports:
      - "3000:3000" # LOCAL:CIBLE
    volumes:
      - ./config/grafana-provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor metricsSummary
      GF_INSTALL_PLUGINS: novatec-sdg-panel
    depends_on:
      - prometheus
      - loki
      - tempo

# ###################################################################
# Database
# ###################################################################
  postgres:
    image: ${DOCKER_REGISTRY}${IMG_POSTGRES}
    container_name: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PWD}
      POSTGRES_DB: ${DB_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: 'UTC'
      PGTZ: 'UTC'

# ###################################################################
# APPS
# ###################################################################
  lumbercamp:
    container_name: lumbercamp
    image: ${DOCKER_REGISTRY}${IMG_LUMBERCAMP}
    volumes:
      - ./bin/${JAVAAGENT_NAME}:/tools/opentelemetry-javaagent.jar
    ports:
      - 8080:8080
    environment:
      JAVA_TOOL_OPTIONS: -javaagent:/tools/opentelemetry-javaagent.jar
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_USER}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PWD}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:10001
      OTEL_SERVICE_NAME: lumbercamp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      - otel-collector

  furniturestore-1:
    container_name: furniturestore-1
    image: ${DOCKER_REGISTRY}${IMG_FURNITURESTORE}
    volumes:
      - ./bin/${JAVAAGENT_NAME}:/tools/opentelemetry-javaagent.jar
    environment:
      SPRING_OPTS: --app.woodshop.url=http://lumbercamp:8080
      JAVA_TOOL_OPTIONS: -javaagent:/tools/opentelemetry-javaagent.jar
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:10001
      OTEL_SERVICE_NAME: furniturestore-1
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      - otel-collector
      - postgres
      - lumbercamp

  furniturestore-2:
    container_name: furniturestore-2
    image: ${DOCKER_REGISTRY}${IMG_FURNITURESTORE}
    volumes:
      - ./bin/${JAVAAGENT_NAME}:/tools/opentelemetry-javaagent.jar
    environment:
      SPRING_OPTS: --app.woodshop.url=http://lumbercamp:8080
      JAVA_TOOL_OPTIONS: -javaagent:/tools/opentelemetry-javaagent.jar
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:10001
      OTEL_SERVICE_NAME: furniturestore-2
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      - otel-collector
      - postgres
      - lumbercamp

  furniturestore-3:
    container_name: furniturestore-3
    image: ${DOCKER_REGISTRY}${IMG_FURNITURESTORE}
    volumes:
      - ./bin/${JAVAAGENT_NAME}:/tools/opentelemetry-javaagent.jar
    environment:
      SPRING_OPTS: --app.woodshop.url=http://lumbercamp:8080
      JAVA_TOOL_OPTIONS: -javaagent:/tools/opentelemetry-javaagent.jar
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:10001
      OTEL_SERVICE_NAME: furniturestore-3
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      - otel-collector
      - postgres
      - lumbercamp

  woodstoredashboard:
    container_name: woodstoredashboard
    image: ${DOCKER_REGISTRY}${IMG_WOODSTOREDASHBOARD}
    ports:
      - "4200:4200"
    depends_on:
      - lumbercamp

volumes:
  pg_data:
  prom_data:
  grafana_data:
  tempo_data:
